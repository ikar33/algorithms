package ikar.different;

/*
*Необходимо для любого колличества скобок написать алгоритм, который составляет всевозможные комбинации закрытых кблоков.
*Вывести все скобочные последловательности для N
* N = 3 [(((]
* Ответ:
* ()()()
* ()(())
* (())()
* (()())
* ((()))
*/
/*
Описание Алгоритма:
На входе реккурсивной функции передаем строку с заданным количеством открывающих скобок.
Дальнейшая задача будет заключаться в том, чтобы написать вариации закрытия этих скобок.
Создаем цикл, который будет проходить по всем позициям открывающих скобок и вставлять в нужные места закрывающую скобку,
отправляя рекурсивно данную строку заново на обработку, пока не останется незакрытых скобок.
В алгоритме закрывающие скобки ставим если есть незакрытые скобки и если на следующей позиции тоже нет закрывающей скобки, а также
если позиции предыдущей вставленной скобки меньше текщего индекса (иначе будут дубли).
Так же если мы дошли до конца строки и есть незакрытые скобки, то мы в конце добавляем закрывающую скобку.
Выыход из рекурсии и печать когда строка обработана и не осталось незакрытых скобок.

Пример:
N = 2
На входе в рекурсию: ((
1-ое ветвление:
1_1: ()(
1_2: (()

1_1_1:
    ()()
    exit;
1_2_1(())
    exit;

Пример:
N = 3
На входе в рекурсию: (((
1-ое ветвление:
1_1: ()((
    1_1_1:()()(
        1_1_1_1:()()()
    1_1_2:()(()
        1_1_2_1:()()() - последняя вставка 1_1_2 была в 3-ю позицию, до 3-позиуии будут вставлять закр скобки остальные циклы на более выоской ветви, не подходит (дубль)
        1_1_2_2:()(())
1_2: (()(
    1_2_1:  (()()
        1_2_1_1:  (())()
        1_2_1_1:  (()())
1_3: ((()
    1_3_1: ((())
        1_3_1_1: ((()))

Ответ:
* ()()()
* ()(())
* (())()
* (()())
* ((()))

 */
public class YandexBracketsTask {

    public static void main(String[] args){
        int N = 5;


        StringBuilder str = new StringBuilder();
        for(int i = 0; i < N; i++)
            str.append("(");

        addClose(new StringBuilder(str), 0);
    }

    public static void addClose(StringBuilder src, int lastId){
        StringBuilder resSrc = new StringBuilder();
        resSrc = resSrc.append(src);
        int opened = 0;
        for(int i = 0; i < src.length(); i++){
            if(src.substring(i, i + 1).equals("(")){
                opened++;
            }
            if(src.substring(i, i + 1).equals(")")){
                opened--;
            }
            if(opened > 0){
                if(src.length() == i + 1) {
                    addClose(resSrc.append(")"), src.length());
                }else if(lastId <= i && !src.substring(i + 1, i + 2).equals(")")) {
                    StringBuilder newSb = new StringBuilder();
                    newSb = newSb.append(resSrc);
                    addClose(newSb.insert(i + 1, ")"), i);
                }
            }
        }
        if( opened == 0){
            System.out.println(resSrc);
        }
    }
}
